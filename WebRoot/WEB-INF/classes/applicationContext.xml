<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="10" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="100" />
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="1800" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="1000" />
		<property name="initialPoolSize" value="10" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
		
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>com/rainhowchan/shop/user/User.hbm.xml</value>
				<value>com/rainhowchan/shop/category/Category.hbm.xml</value>
				<value>com/rainhowchan/shop/categorysecond/CategorySecond.hbm.xml</value>
				<value>com/rainhowchan/shop/product/Product.hbm.xml</value>
			</list>
		</property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	
	<bean id="checkImgAction" class="com.rainhowchan.shop.user.CheckImgAction" scope="prototype"/>
	
	<bean id="indexAction" class="com.rainhowchan.shop.index.IndexAction" scope="prototype">
		<property name="categoryService" ref="categoryService"/>
		<property name="productService" ref="productService"/>
	</bean>
	<bean id="userAction" class="com.rainhowchan.shop.user.UserAction" scope="prototype">
		<property name="userService" ref="userService"></property>
	</bean>
	<bean id="productAction" class="com.rainhowchan.shop.product.ProductAction" scope="prototype">
		<property name="categoryService" ref="categoryService"/>
		<property name="productService" ref="productService"/>
	</bean>
	
	
	<bean id="userService" class="com.rainhowchan.shop.user.UserService">
		<property name="userDao" ref="userDao"></property>
	</bean>
	<bean id="categoryService" class="com.rainhowchan.shop.category.CategoryService">
		<property name="categoryDao" ref="categoryDao"></property>
	</bean>
	<bean id="productService" class="com.rainhowchan.shop.product.ProductService">
		<property name="productDao" ref="productDao"></property>
	</bean>

	
	<bean id="userDao" class="com.rainhowchan.shop.user.UserDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="categoryDao" class="com.rainhowchan.shop.category.CategoryDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="productDao" class="com.rainhowchan.shop.product.ProductDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
</beans>